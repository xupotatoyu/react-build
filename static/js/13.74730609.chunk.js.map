{"version":3,"sources":["containters/Write/Write.js"],"names":["Write","props","getInputValue","event","target","value","setState","title","fetchPost","url","params","self","fetch","body","JSON","stringify","headers","method","then","response","json","res","errno","success","history","push","error","catch","console","submitContent","htmlContent","state","editorState","toHTML","param","content","log","saveContent","handleEditorChange","BraftEditor","createEditorState","window","localStorage","getItem","this","className","placeholder","onChange","onSave","type","onClick","React","Component"],"mappings":"4WAmDqBA,G,iEAEjB,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAQRC,cAAc,SAACC,GACb,GAAGA,GAASA,EAAMC,QAAUD,EAAMC,OAAOC,MAAM,CAC7C,IAAIA,EAAQF,EAAMC,OAAOC,MACvB,EAAKC,SAAS,CACZC,MAAMF,MAbI,EA0BlBG,UAAU,SAACC,EAAIC,GACb,IAAIC,EAAI,eACRC,MAAMH,EAAK,CACTI,KAAMC,KAAKC,UAAUL,GACrBM,QAAS,CACP,eAAgB,oBAElBC,OAAQ,SACPC,MAAK,SAAAC,GACN,OAAOA,EAASC,UACfF,MAAK,SAAAG,GACW,IAAdA,EAAIC,OACL,IAAQC,QAAQ,2BAAO,GAEvBZ,EAAKV,MAAMuB,QAAQC,KAAK,UAExB,IAAQC,MAAM,+BAEfC,OAAM,SAAAD,GAAK,OAAIE,QAAQF,MAAMA,OA5ChB,EA+ClBG,cAAe,WAEX,IAAMC,EAAc,EAAKC,MAAMC,YAAYC,SAEvCC,EAAQ,CACV3B,MAAO,EAAKwB,MAAMxB,MAClB4B,QAASL,GAEX,EAAKtB,UALG,gBAKW0B,GACnBN,QAAQQ,IAAI,iBAxDE,EA2DlBC,YAAY,WAEV,EAAKnC,gBACL0B,QAAQQ,IAAI,iBA9DI,EAiElBE,mBAAqB,SAACN,GAClB,EAAK1B,SAAS,CAAE0B,iBAhElB,EAAKD,MAAQ,CAEXC,YAAaO,IAAYC,kBAAkB,MAC3CjC,MAAM,IALQ,E,+SAsEZkC,OAAOC,aAAaC,QAAQ,cAC9B,IAAQjB,MAAM,4BACdkB,KAAK3C,MAAMuB,QAAQC,KAAK,Y,+BAGjB,IAAD,OACEO,EAAgBY,KAAKb,MAArBC,YACR,OACI,yBAAKa,UAAU,SACb,yBAAKA,UAAU,eACb,uBACAC,YAAY,eACZC,SAAU,SAAA5C,GAAK,OAAE,EAAKD,cAAcC,OAGtC,yBAAK0C,UAAU,iBACb,kBAAC,IAAD,CACIxC,MAAO2B,EACPe,SAAUH,KAAKN,mBACfU,OAAQJ,KAAKP,eAGnB,yBAAKQ,UAAU,gBACb,uBAAQI,KAAK,UAAUC,QAASN,KAAKP,aAArC,gBACA,0BAAMQ,UAAU,UAChB,uBAASI,KAAK,UAAUC,QAASN,KAAKf,eAAtC,sB,GAjGmBsB,IAAMC","file":"static/js/13.74730609.chunk.js","sourcesContent":["import React from 'react';\r\n// 引入编辑器组件\r\nimport BraftEditor from 'braft-editor';\r\n// 引入编辑器样式\r\nimport 'braft-editor/dist/index.css';\r\n\r\nimport {Input,Button,message} from 'antd';\r\nimport './Write.less';\r\n\r\n// class Md extends React.Component {\r\n//   state = {\r\n//     // 创建一个空的editorState作为初始值\r\n//     editorState: BraftEditor.createEditorState(null)\r\n// }\r\n\r\n// async componentDidMount () {\r\n//     // // 假设此处从服务端获取html格式的编辑器内容\r\n//     // const htmlContent = await fetchEditorContent()\r\n//     // // 使用BraftEditor.createEditorState将html字符串转换为编辑器需要的editorStat\r\n//     // this.setState({\r\n//     //     editorState: BraftEditor.createEditorState(htmlContent)\r\n//     // })\r\n// }\r\n\r\n// submitContent = async () => {\r\n//     // 在编辑器获得焦点时按下ctrl+s会执行此方法\r\n//     // 编辑器内容提交到服务端之前，可直接调用editorState.toHTML()来获取HTML格式的内容\r\n//     const htmlContent = this.state.editorState.toHTML()\r\n//     // const result = await saveEditorContent(htmlContent)\r\n// }\r\n\r\n// handleEditorChange = (editorState) => {\r\n//     this.setState({ editorState })\r\n// }\r\n\r\n// render () {\r\n\r\n//     const { editorState } = this.state\r\n//     return (\r\n//         <div className=\"my-component\">\r\n//             <BraftEditor\r\n//                 value={editorState}\r\n//                 onChange={this.handleEditorChange}\r\n//                 onSave={this.submitContent}\r\n//             />\r\n//         </div>\r\n//     )\r\n\r\n// }\r\n// }\r\n\r\nexport default class Write extends React.Component { \r\n\r\n    constructor(props){\r\n      super(props)\r\n      this.state = {\r\n        // 创建一个空的editorState作为初始值\r\n        editorState: BraftEditor.createEditorState(null),\r\n        title:''\r\n      }\r\n    }\r\n    // 获取标题\r\n    getInputValue=(event)=>{\r\n      if(event && event.target && event.target.value){\r\n        let value = event.target.value;       \r\n          this.setState({\r\n            title:value\r\n          })\r\n      }\r\n    }\r\n    async componentDidMount () {\r\n        // // 假设此处从服务端获取html格式的编辑器内容\r\n        // const htmlContent = await fetchEditorContent()\r\n        // // 使用BraftEditor.createEditorState将html字符串转换为编辑器需要的editorStat\r\n        // this.setState({\r\n        //     editorState: BraftEditor.createEditorState(htmlContent)\r\n        // })\r\n    }\r\n    // 提交请求\r\n    fetchPost=(url,params)=>{\r\n      let self = this\r\n      fetch(url, {\r\n        body: JSON.stringify(params),\r\n        headers: {\r\n          'content-type': 'application/json'\r\n        },\r\n        method: 'POST'\r\n      }).then(response=>{\r\n        return response.json()\r\n      }).then(res=>{\r\n        if(res.errno === 0){\r\n          message.success('发布成功',2)\r\n          // window.location.reload()\r\n          self.props.history.push('/main')\r\n        }else{\r\n          message.error('保存失败')\r\n        }\r\n      }).catch(error => console.error(error))\r\n    }\r\n    // 提交函数\r\n    submitContent =() => {\r\n        // 编辑器内容提交到服务端之前，可直接调用editorState.toHTML()来获取HTML格式的内容\r\n        const htmlContent = this.state.editorState.toHTML()\r\n        let url='/api/blog/new'\r\n        let param = {\r\n          title: this.state.title,\r\n          content: htmlContent\r\n        }\r\n        this.fetchPost(url,param)\r\n        console.log('提交')\r\n    }\r\n\r\n    saveContent=()=> {\r\n      // 在编辑器获得焦点时按下ctrl+s会执行此方法\r\n      this.getInputValue()\r\n      console.log('保存')\r\n    }\r\n\r\n    handleEditorChange = (editorState) => {\r\n        this.setState({ editorState })\r\n    }\r\n    \r\n    componentWillMount(){\r\n      if(!window.localStorage.getItem('userName')){\r\n        message.error('请先登录')\r\n        this.props.history.push('/main')\r\n      }\r\n    }\r\n    render () {\r\n        const { editorState } = this.state\r\n        return (\r\n            <div className=\"write\">\r\n              <div className=\"write-title\">\r\n                <Input \r\n                placeholder=\"标题\"\r\n                onChange={event=>this.getInputValue(event)}\r\n                ></Input>\r\n              </div>\r\n              <div className=\"write-content\">\r\n                <BraftEditor\r\n                    value={editorState}\r\n                    onChange={this.handleEditorChange}\r\n                    onSave={this.saveContent}\r\n                />\r\n              </div>\r\n              <div className=\"write-button\">\r\n                <Button type='primary' onClick={this.saveContent}>保存</Button>\r\n                <span className=\"wspan\"></span>\r\n                <Button  type='primary' onClick={this.submitContent}>提交</Button>\r\n              </div>\r\n            </div>\r\n        )\r\n \r\n    }\r\n \r\n}"],"sourceRoot":""}